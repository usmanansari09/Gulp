"""
Django settings for gulp_28149 project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ
import logging
from modules.manifest import get_modules
import firebase_admin
from firebase_admin import initialize_app, credentials

env = environ.Env()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

ALLOWED_HOSTS = env.list("HOST", default=["*"])
SITE_ID = 1

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env.bool("SECURE_REDIRECT", default=False)
GOOGLE_MAPS_API_KEY = "AIzaSyBX5iRh7C7MBlFYlK3ia2G0bfMLbyYCvOk"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.gis",
    "django_google_maps",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django_filters",
    "social_django",
    "fcm_django",
]
LOCAL_APPS = [
    "home",
    "users.apps.UsersConfig",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_gis",
    "rest_auth",
    "rest_auth.registration",
    "bootstrap4",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "django_extensions",
    "drf_yasg",
    "storages",
]
MODULES_APPS = get_modules()

INSTALLED_APPS += LOCAL_APPS + THIRD_PARTY_APPS + MODULES_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "gulp_28149.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "web_build")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.media",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gulp_28149.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

if env.str("DATABASE_URL", default=None):
    DATABASES = {"default": env.db()}
    DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'



# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

MIDDLEWARE += ["whitenoise.middleware.WhiteNoiseMiddleware"]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
    "social_core.backends.facebook.FacebookOAuth2",
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.twitter.TwitterOAuth",
)

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "web_build/static"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# allauth / users
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "users:redirect"

ACCOUNT_ADAPTER = "users.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "users.adapters.SocialAccountAdapter"
ACCOUNT_ALLOW_REGISTRATION = env.bool("ACCOUNT_ALLOW_REGISTRATION", True)
SOCIALACCOUNT_ALLOW_REGISTRATION = env.bool(
    "SOCIALACCOUNT_ALLOW_REGISTRATION", True)

REST_AUTH_SERIALIZERS = {
    # Replace password reset serializer to fix 500 error
    # import path to CustomTokenSerializer defined above.
    'TOKEN_SERIALIZER': 'home.api.v1.serializers.CustomTokenSerializer',
    'USER_DETAILS_SERIALIZER': 'home.api.v1.serializers.UserSerializer',
    "PASSWORD_RESET_SERIALIZER": "home.api.v1.serializers.PasswordSerializer",
}
REST_AUTH_REGISTER_SERIALIZERS = {
    # Use custom serializer that has no username and matches web signup
    "REGISTER_SERIALIZER": "home.api.v1.serializers.SignupSerializer",
}

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": "433348003200-gfmga09qhrdeo1lr6f5gicr95n2327bb.apps.googleusercontent.com",
            "secret": "cc3iJTjzCquciN_4JboEOmJq",
        },
    },
    'facebook': {
        "APP": {
            "client_id": "<client_id>",
            "secret": "<secret>",
        },
    },
}

# Custom user model
AUTH_USER_MODEL = "users.User"

EMAIL_HOST = env.str("EMAIL_HOST", "smtp.sendgrid.net")
EMAIL_HOST_USER = env.str("SENDGRID_USERNAME", "apikey")
EMAIL_HOST_PASSWORD = env.str("SENDGRID_PASSWORD", "")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", "")
SENDGRID_SANDBOX_MODE_IN_DEBUG = False

SENDGRID_ECHO_TO_STDOUT = False

TWILLIO_ACCOUNT_ID = env.str("TWILLIO_ACCOUNT_ID", "")
TWILLIO_AUTH_TOKEN = env.str("TWILLIO_AUTH_TOKEN", "")
TWILLIO_FROM_NUMBER = env.str("TWILLIO_FROM_NUMBER", "")

# AWS S3 config
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")

USE_S3 = (
    AWS_ACCESS_KEY_ID
    and AWS_SECRET_ACCESS_KEY
    and AWS_STORAGE_BUCKET_NAME
    and AWS_STORAGE_REGION
)

if USE_S3:
    AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read")
    AWS_MEDIA_LOCATION = env.str("AWS_MEDIA_LOCATION", "media")
    AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
    AWS_S3_MAX_AGE_SECONDS = 60 * 60 * 24 * 365 * 10
    AWS_S3_SIGNATURE_VERSION = "s3v4"
    # AWS_QUERYSTRING_AUTH = False
    DEFAULT_FILE_STORAGE = env.str(
        "DEFAULT_FILE_STORAGE", "home.storage_backends.MediaStorage"
    )
    MEDIA_URL = "/mediafiles/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")


# Swagger settings for api docs
SWAGGER_SETTINGS = {
    "DEFAULT_INFO": f"{ROOT_URLCONF}.api_info",
}

if DEBUG or not (EMAIL_HOST_USER and EMAIL_HOST_PASSWORD):
    # output email to console instead of sending
    if not DEBUG:
        logging.warning(
            "You should setup `SENDGRID_USERNAME` and `SENDGRID_PASSWORD` env vars to send emails."
        )
    # EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    EMAIL_BACKEND = "sgbackend.SendGridBackend"
    SENDGRID_API_KEY = env.str("SENDGRID_PASSWORD", "")


# REST_USE_JWT = True
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}


GOOGLE_APPLICATION_CREDENTIALS = {
  "type": "service_account",
  "project_id": "gulp-c3407",
  "private_key_id": "4f0d35c81c4a1ff4316a34cc9e5390c7615b23a1",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCZdkQAKeyGTSp4\nnnbEbrM/ackUBLA/xZFiHlE3LcDIQcgKUFeRWmHIc9AckUUr46DsxmmoNkV5PpyB\nnPeHg3vjXIxmuY0ejli9JRRCRgiq1vhZsK4jyVj15LbnAiDVt0Yyw5GwV2Yn/0YN\nbEYAunGI4c4JluzV37J1swxg+yzxXt0z4l+cA3V7LiCwR2qlM+5Q1UBG1AjkA84p\n4G4Lb4GrIjqHVHJGMiXz++gQbcmRzRO5zLLooefub3ycPxz2n/HHIImPR4khDJzt\ng6BGso5bUWIdI+VoL+2LbwR4/Iz5NtCnj9/2LN2DguWmNLDoKgTj+JIKtOu3l1/W\n5OV5c/zLAgMBAAECggEAEQBrPuFmKj2OVlf9Vyc0hfKrAPlsAASxZf9vMVUeUJFe\ndNYQfYgCi/oDX8bbClETrme6Tj/aU+O95GuGzjqg6mrXGze0t2KUg5ACEz2TDupL\nZWm6QTi4ubVMa4IZhSk4MROS+8hoXEdfHsmUuoFCvCQtdskuapt34qui1B5qYkCG\nXKtmHPO/XCkNZfGuODjf9sK+XCNmdAgtXoJaOFuTjFMiyZ+I9OTGGiEycxVcMoUT\niMBSHqtfVixRWuwPKimXn2A2rK82Jc0iT5KGe71xneBBu25+k+o5eKGBqNA6bOZ8\nLsyRy59JDzA8mY/HrPP+q7ctNJAeJAljJW+umd6KMQKBgQDHB7TPWyDt2TF3R0ns\nxMQJGe0iLqTFXufTXX4GOhuCZe04q6exDyytFz8LZJN+Fs+qqDUNtHz0ro0r9kPe\npc1M9HgBPDVRBPQss7E7ooEzRZIUpVTweFrdX5GpDeLzyiVgKjia10CkklRQBrlP\nGut0SYhtUzQFhLP+1VIBnxZd1QKBgQDFY3jBA+qIw6fwgMlxxlSrVTpA+CGiFGan\nnHdYy8m3fNIgdY4PNw3sLDAjA4kVriPpKDW8sqttAFZC8qdrUjrgHfPjzOGmkvcg\nfkmurMBdA0y/+Zk+/RuyHlyJMjJgbMkNA/RoZWDJUhLU7khy3U90hjSAKbfClRB9\n15BBj/QgHwKBgQC00h6GCL/Y92tGd8EE2BtWPXTAimnuWvP5hsYZOC+H/7xOsT0v\n0p5/P1BqtFx/wI+49wsEQYcI8ZCWcS1mGXJ0yOJCFQZHbl28QyDxEgmZoEpAcZjC\nxEWhO9NlKJWZcX0VaiZ1Hry/B6aL8h/na4ig5LGKyX3IybCSBBJ2IKe8ZQKBgGjX\nzvnmlJqUIg2yukz+ZVaj7E85/NNUNrpsd0/o3nnhiNLI3e3i9jgtuFvAsv2bA2QC\ngZh65mb9ONRSgu6UPMVx42tqFakegrj1mzl2dK5y5D9L2kQEuMNBMTGGQg/JeHi7\nUwRoZKJKP8ptznmEZ4GjDxvMDNkDyECvUOYiCi9NAoGBALIEaiYnDsxKiom0v98q\nuSGiqQUS5W+VDuVGIDtwmHmLHeNsuhfJp15aZbzhgirOXcG5fagpYCj9AdxUcV6i\nVAykkg2NthCOTeZz0lcGVS/w9EbAWJ2PtUoFYLXy5yz3qX4mpt3e0ZrE+xqoIgm7\n7xJO+JzjxL50JreO9S5GmfnY\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-mzt2q@gulp-c3407.iam.gserviceaccount.com",
  "client_id": "113607201591605133976",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-mzt2q%40gulp-c3407.iam.gserviceaccount.com"
}


if not firebase_admin._apps:
    cred = credentials.Certificate(GOOGLE_APPLICATION_CREDENTIALS)
    default_app = initialize_app(cred)

FIREBASE_APP = default_app

FCM_DJANGO_SETTINGS = {
     # default: _('FCM Django')
     # "APP_VERBOSE_NAME": "GulpApp",
     # true if you want to have only one active device per registered user at a time
     # default: False
    "ONE_DEVICE_PER_USER": False,
     # devices to which notifications cannot be sent,
     # are deleted upon receiving error response from FCM
     # default: False
    "DELETE_INACTIVE_DEVICES": False,
    "FCM_SERVER_KEY": env.str("FCM_SERVER_KEY", default=None),
}